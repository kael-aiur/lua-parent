import org.luaj.vm2.*;
import org.luaj.vm2.lib.*;
public class _iolib extends VarArgFunction {
   public Varargs onInvoke(Varargs $arg) {
      final LuaValue platform = $arg.arg1();
      env.get(print).call(platform$1,platform);
      env.get(print).call(env.get(io).neq(NIL));
      env.get(print).call(env.get(io).get(open).neq(NIL));
      env.get(print).call(env.get(io).get(stdin).neq(NIL));
      env.get(print).call(env.get(io).get(stdout).neq(NIL));
      env.get(print).call(env.get(io).get(stderr).neq(NIL));
      env.get(print).invoke(varargsOf(write,env.get(io).get(write).invoke()));
      env.get(print).invoke(varargsOf(write,env.get(io).get(write).invoke(This)));
      env.get(print).invoke(varargsOf(write,env.get(io).get(write).invoke(_is_a_pe)));
      env.get(print).invoke(varargsOf(flush,env.get(io).get(flush).invoke()));
      LuaValue f = env.get(io).get(open).call(abc_txt,w);
      env.get(print).invoke(varargsOf(f$1,env.get(type$1).invoke(f)));
      env.get(print).invoke(env.get(io).get(type$1).invoke(f));
      env.get(print).invoke(varargsOf(write,f.invokemethod(write,abcdef_1)));
      env.get(print).invoke(varargsOf(type_f_,env.get(io).get(type$1).invoke(f)));
      env.get(print).invoke(varargsOf(close,f.invokemethod(close)));
      env.get(print).invoke(varargsOf(type_f_,env.get(io).get(type$1).invoke(f)));
      env.get(print).invoke(varargsOf(type__f_,env.get(io).get(type$1).invoke(f$1)));
      final LuaValue g = env.get(io).get(open).call(abc_txt,r);
      final LuaValue t = LuaValue.listOf(new LuaValue[]{}, g.invokemethod(read,varargsOf(new LuaValue[] {_3,_3,_n,_n,_l,_l,},_a)));
      LuaValue f$2,s,var;
      Varargs v;
      final Varargs v$1 = env.get(ipairs).invoke(t);
      f$2 = v$1.arg1();
      s = v$1.arg(2);
      var = v$1.arg(3);
      while (true) {
         v = f$2.invoke(varargsOf(s,var));
         if ((var=v.arg1()).isnil()) break;
         final LuaValue i = var;
         final LuaValue v$2 = v.arg(2);
         env.get(print).invoke(varargsOf(env.get(string).get(format).invoke(varargsOf(_q,env.get(tostring$1).invoke(v$2))).arg1(),env.get(type$1).invoke(v$2)));
         env.get(print).call(______,i);
      }
      final Varargs t$1 = env.get(io).get(open).invoke(varargsOf(abc_txt,a));
      final LuaValue h = t$1.arg1();
      final LuaValue s$1 = t$1.arg(2);
      env.get(print).invoke(varargsOf(new LuaValue[] {h$1,env.get(io).get(type$1).call(h),env.get(string).get(sub$1).call(env.get(tostring$1).call(h),ONE,_6),},s$1));
      env.get(print).invoke(varargsOf(write,h.invokemethod(write,and_more)));
      env.get(print).invoke(varargsOf(close,h.invokemethod(close)));
      if ( platform.neq_b(JME) ) {
         final LuaValue j = env.get(io).get(open).call(abc_txt,r);
         env.get(print).invoke(varargsOf(j$1,env.get(io).get(type$1).invoke(j)));
         env.get(print).invoke(varargsOf(seek,j.invokemethod(seek,varargsOf(set$1,_3))));
         env.get(print).invoke(varargsOf(read,j.method(read,_4),j.invokemethod(read,_3)));
         env.get(print).invoke(varargsOf(seek,j.invokemethod(seek,varargsOf(set$1,_2))));
         env.get(print).invoke(varargsOf(read,j.method(read,_4),j.invokemethod(read,_3)));
         env.get(print).invoke(varargsOf(seek,j.invokemethod(seek,varargsOf(cur,_8.neg()))));
         env.get(print).invoke(varargsOf(read,j.method(read,_4),j.invokemethod(read,_3)));
         env.get(print).invoke(varargsOf(seek_cur,j.invokemethod(seek,varargsOf(cur,ZERO))));
         env.get(print).invoke(varargsOf(seek_cur$1,j.invokemethod(seek,varargsOf(cur,_20))));
         env.get(print).invoke(varargsOf(seek_end,j.invokemethod(seek,varargsOf(end,_5.neg()))));
         env.get(print).invoke(varargsOf(read_4_,env.get(string).get(format).invoke(varargsOf(_q,env.get(tostring$1).invoke(j.invokemethod(read,_4))))));
         env.get(print).invoke(varargsOf(read_4_,env.get(string).get(format).invoke(varargsOf(_q,env.get(tostring$1).invoke(j.invokemethod(read,_4))))));
         env.get(print).invoke(varargsOf(read_4_,env.get(string).get(format).invoke(varargsOf(_q,env.get(tostring$1).invoke(j.invokemethod(read,_4))))));
         env.get(print).invoke(varargsOf(close,j.invokemethod(close)));
      }
      f = env.get(io).get(open).call(abc_txt,w);
      env.get(print).invoke(varargsOf(f$1,env.get(io).get(type$1).invoke(f)));
      env.get(print).invoke(varargsOf(write,f.invokemethod(write,line_one)));
      env.get(print).invoke(varargsOf(type_f_,env.get(io).get(type$1).invoke(f)));
      env.get(print).invoke(varargsOf(close,f.invokemethod(close)));
      LuaValue f$3,s$2,var$1;
      Varargs v$3;
      final Varargs v$4 = env.get(io).get(lines).invoke(abc_txt);
      f$3 = v$4.arg1();
      s$2 = v$4.arg(2);
      var$1 = v$4.arg(3);
      while (true) {
         v$3 = f$3.invoke(varargsOf(s$2,var$1));
         if ((var$1=v$3.arg1()).isnil()) break;
         final LuaValue l = var$1;
         env.get(print).invoke(env.get(string).get(format).invoke(varargsOf(_q,l)));
      }
      env.get(io).get(input).call(abc_txt);
      LuaValue f$4,s$3,var$2;
      Varargs v$5;
      final Varargs v$6 = env.get(io).get(lines).invoke();
      f$4 = v$6.arg1();
      s$3 = v$6.arg(2);
      var$2 = v$6.arg(3);
      while (true) {
         v$5 = f$4.invoke(varargsOf(s$3,var$2));
         if ((var$2=v$5.arg1()).isnil()) break;
         final LuaValue l$1 = var$2;
         env.get(print).invoke(env.get(string).get(format).invoke(varargsOf(_q,l$1)));
      }
      env.get(io).get(input).invoke(env.get(io).get(open).invoke(varargsOf(abc_txt,r)));
      LuaValue f$5,s$4,var$3;
      Varargs v$7;
      final Varargs v$8 = env.get(io).get(lines).invoke();
      f$5 = v$8.arg1();
      s$4 = v$8.arg(2);
      var$3 = v$8.arg(3);
      while (true) {
         v$7 = f$5.invoke(varargsOf(s$4,var$3));
         if ((var$3=v$7.arg1()).isnil()) break;
         final LuaValue l$2 = var$3;
         env.get(print).invoke(env.get(string).get(format).invoke(varargsOf(_q,l$2)));
      }
      env.get(io).get(input).call(abc_txt);
      env.get(io).get(input).invoke(env.get(io).get(input).invoke());
      LuaValue f$6,s$5,var$4;
      Varargs v$9;
      final Varargs v$10 = env.get(io).get(lines).invoke();
      f$6 = v$10.arg1();
      s$5 = v$10.arg(2);
      var$4 = v$10.arg(3);
      while (true) {
         v$9 = f$6.invoke(varargsOf(s$5,var$4));
         if ((var$4=v$9.arg1()).isnil()) break;
         final LuaValue l$3 = var$4;
         env.get(print).invoke(env.get(string).get(format).invoke(varargsOf(_q,l$3)));
      }
      final LuaValue[] count = {ZERO};
      env.get(io).set(tmpfile,new VarArgFunction(env) {
         public Varargs invoke(Varargs $arg) {
            count[0] = valueOf(count[0].checkdouble()+1);
            return new TailcallVarargs(env.get(io).get(open),varargsOf(tmp.concat(count[0].concat(_out.buffer())).value(),w));
         }
      });
      final LuaValue a$1 = env.get(io).get(tmpfile).call();
      final LuaValue b = env.get(io).get(tmpfile).call();
      env.get(print).invoke(env.get(io).get(type$1).invoke(a$1));
      env.get(print).invoke(env.get(io).get(type$1).invoke(b));
      env.get(print).invoke(varargsOf(a_write,a$1.invokemethod(write,aaaaaaa)));
      env.get(print).invoke(varargsOf(b_write,b.invokemethod(write,bbbbbbb)));
      env.get(print).invoke(varargsOf(a_setvbu,a$1.invokemethod(setvbuf,no)));
      env.get(print).invoke(varargsOf(a_setvbu,a$1.invokemethod(setvbuf,varargsOf(full,_1024))));
      env.get(print).invoke(varargsOf(a_setvbu,a$1.invokemethod(setvbuf,line)));
      env.get(print).invoke(varargsOf(a_write,a$1.invokemethod(write,ccccc)));
      env.get(print).invoke(varargsOf(b_write,b.invokemethod(write,ddddd)));
      env.get(print).invoke(varargsOf(a_flush,a$1.invokemethod(flush)));
      env.get(print).invoke(varargsOf(b_flush,b.invokemethod(flush)));
      final LuaValue pcall$1 = new VarArgFunction(env) {
         public Varargs invoke(Varargs $arg) {
            final LuaValue arg = NIL;
            final Varargs t$2 = env.get(pcall).invoke($arg);
            final LuaValue s$6 = t$2.arg1();
            final LuaValue e = t$2.arg(2);
            if ( s$6.toboolean() ) {
               return s$6;
            }
            return varargsOf(s$6,e.invokemethod(match,closed));
         }
      };
      env.get(print).invoke(varargsOf(a_close,pcall$1.invoke(varargsOf(a$1.get(close),a$1))));
      env.get(print).invoke(varargsOf(a_write,pcall$1.invoke(varargsOf(a$1.get(write),a$1,eee))));
      env.get(print).invoke(varargsOf(a_flush,pcall$1.invoke(varargsOf(a$1.get(flush),a$1))));
      env.get(print).invoke(varargsOf(a_read,pcall$1.invoke(varargsOf(a$1.get(read),a$1,_5))));
      env.get(print).invoke(varargsOf(a_lines,pcall$1.invoke(varargsOf(a$1.get(lines),a$1))));
      env.get(print).invoke(varargsOf(a_seek,pcall$1.invoke(varargsOf(new LuaValue[] {a$1.get(seek),a$1,cur,},_2.neg()))));
      env.get(print).invoke(varargsOf(a_setvbu,pcall$1.invoke(varargsOf(a$1.get(setvbuf),a$1,no))));
      env.get(print).invoke(varargsOf(a_close,pcall$1.invoke(varargsOf(a$1.get(close),a$1))));
      env.get(print).invoke(varargsOf(io_type_,pcall$1.invoke(varargsOf(env.get(io).get(type$1),a$1))));
      env.get(print).invoke(varargsOf(io_close,pcall$1.invoke(env.get(io).get(close))));
      env.get(print).invoke(varargsOf(io_close$1,pcall$1.invoke(varargsOf(env.get(io).get(close),env.get(io).get(output).invoke()))));
      env.get(io).get(output).call(abc_txt);
      env.get(print).invoke(varargsOf(io_close,pcall$1.invoke(env.get(io).get(close))));
      env.get(print).invoke(varargsOf(io_write,pcall$1.invoke(varargsOf(env.get(io).get(write),eee))));
      env.get(print).invoke(varargsOf(io_flush,pcall$1.invoke(env.get(io).get(flush))));
      env.get(print).invoke(varargsOf(io_close$2,pcall$1.invoke(env.get(io).get(close))));
      env.get(io).get(input).call(abc_txt).method(close);
      env.get(print).invoke(varargsOf(io_read,pcall$1.invoke(varargsOf(env.get(io).get(read),_5))));
      env.get(print).invoke(varargsOf(io_lines,pcall$1.invoke(env.get(io).get(lines))));
      return NONE;
   }
   static final LuaValue print = valueOf("print");
   static final LuaValue platform$1 = valueOf("platform");
   static final LuaValue io = valueOf("io");
   static final LuaValue open = valueOf("open");
   static final LuaValue stdin = valueOf("stdin");
   static final LuaValue stdout = valueOf("stdout");
   static final LuaValue stderr = valueOf("stderr");
   static final LuaValue write = valueOf("write");
   static final LuaValue This = valueOf("This");
   static final LuaValue _is_a_pe = valueOf(" is a pen.");
   static final LuaValue flush = valueOf("flush");
   static final LuaValue abc_txt = valueOf("abc.txt");
   static final LuaValue w = valueOf("w");
   static final LuaValue f$1 = valueOf("f");
   static final LuaValue type$1 = valueOf("type");
   static final LuaValue abcdef_1 = valueOf("abcdef 12345 \t\t 678910 more\u0007aaaaaa\bbbbthe rest");
   static final LuaValue type_f_ = valueOf("type(f)");
   static final LuaValue close = valueOf("close");
   static final LuaValue type__f_ = valueOf("type(\"f\")");
   static final LuaValue r = valueOf("r");
   static final LuaValue read = valueOf("read");
   static final LuaValue _3 = valueOf(3);
   static final LuaValue _n = valueOf("*n");
   static final LuaValue _l = valueOf("*l");
   static final LuaValue _a = valueOf("*a");
   static final LuaValue ipairs = valueOf("ipairs");
   static final LuaValue string = valueOf("string");
   static final LuaValue format = valueOf("format");
   static final LuaValue _q = valueOf("%q");
   static final LuaValue tostring$1 = valueOf("tostring");
   static final LuaValue ______ = valueOf("----- ");
   static final LuaValue a = valueOf("a");
   static final LuaValue h$1 = valueOf("h");
   static final LuaValue sub$1 = valueOf("sub");
   static final LuaValue _6 = valueOf(6);
   static final LuaValue and_more = valueOf("and more and more and more text.");
   static final LuaValue JME = valueOf("JME");
   static final LuaValue j$1 = valueOf("j");
   static final LuaValue seek = valueOf("seek");
   static final LuaValue set$1 = valueOf("set");
   static final LuaValue _4 = valueOf(4);
   static final LuaValue _2 = valueOf(2);
   static final LuaValue cur = valueOf("cur");
   static final LuaValue _8 = valueOf(8);
   static final LuaValue seek_cur = valueOf("seek(cur,0)");
   static final LuaValue seek_cur$1 = valueOf("seek(cur,20)");
   static final LuaValue _20 = valueOf(20);
   static final LuaValue seek_end = valueOf("seek(end,-5)");
   static final LuaValue end = valueOf("end");
   static final LuaValue _5 = valueOf(5);
   static final LuaValue read_4_ = valueOf("read(4)");
   static final LuaValue line_one = valueOf("line one\nline two\n\nafter blank line\nunterminated line");
   static final LuaValue lines = valueOf("lines");
   static final LuaValue input = valueOf("input");
   static final LuaValue tmp = valueOf("tmp");
   static final LuaValue _out = valueOf(".out");
   static final LuaValue tmpfile = valueOf("tmpfile");
   static final LuaValue a_write = valueOf("a:write");
   static final LuaValue aaaaaaa = valueOf("aaaaaaa");
   static final LuaValue b_write = valueOf("b:write");
   static final LuaValue bbbbbbb = valueOf("bbbbbbb");
   static final LuaValue a_setvbu = valueOf("a:setvbuf");
   static final LuaValue setvbuf = valueOf("setvbuf");
   static final LuaValue no = valueOf("no");
   static final LuaValue full = valueOf("full");
   static final LuaValue _1024 = valueOf(1024);
   static final LuaValue line = valueOf("line");
   static final LuaValue ccccc = valueOf("ccccc");
   static final LuaValue ddddd = valueOf("ddddd");
   static final LuaValue a_flush = valueOf("a:flush");
   static final LuaValue b_flush = valueOf("b:flush");
   static final LuaValue pcall = valueOf("pcall");
   static final LuaValue match = valueOf("match");
   static final LuaValue closed = valueOf("closed");
   static final LuaValue a_close = valueOf("a:close");
   static final LuaValue eee = valueOf("eee");
   static final LuaValue a_read = valueOf("a:read");
   static final LuaValue a_lines = valueOf("a:lines");
   static final LuaValue a_seek = valueOf("a:seek");
   static final LuaValue io_type_ = valueOf("io.type(a)");
   static final LuaValue io_close = valueOf("io.close()");
   static final LuaValue io_close$1 = valueOf("io.close(io.output())");
   static final LuaValue output = valueOf("output");
   static final LuaValue io_write = valueOf("io.write");
   static final LuaValue io_flush = valueOf("io.flush");
   static final LuaValue io_close$2 = valueOf("io.close");
   static final LuaValue io_read = valueOf("io.read");
   static final LuaValue io_lines = valueOf("io.lines");
}